def read_mapping(file_path):
    mapping = {}
    with open(file_path, 'r') as file:
        for line in file:
            key, value = line.strip().split()
            mapping[key] = value
    return mapping

def resolve_mappings(file1_mapping, file2_mapping):
    resolved_data = {}
    unresolved_keys = set(file1_mapping.keys())
    resolution_attempts = 0

    while unresolved_keys and resolution_attempts < len(file1_mapping):
        for key in list(unresolved_keys):
            value = file1_mapping[key]
            while value in file1_mapping:
                value = file1_mapping[value]
            if value in file2_mapping:
                resolved_data[key] = file2_mapping[value]
                unresolved_keys.remove(key)
            else:
                file1_mapping[key] = value  # Update the mapping with the latest resolved value

        resolution_attempts += 1

    if unresolved_keys:
        raise ValueError(f"Unresolved keys: {unresolved_keys}")

    return resolved_data

def main():
    file1_mapping = read_mapping('file1.txt')
    file2_mapping = read_mapping('file2.txt')

    resolved_data = resolve_mappings(file1_mapping, file2_mapping)

    for key, value in resolved_data.items():
        print(f"{key}: {value}")

if __name__ == "__main__":
    main()
