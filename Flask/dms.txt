CREATE TABLE your_api_table (
  component VARCHAR2(100),
  request_type VARCHAR2(10),
  url VARCHAR2(500),
  email VARCHAR2(100)
);


import requests
import pandas as pd
import time
from concurrent.futures import ThreadPoolExecutor
from sqlalchemy import create_engine

# Database connection details
db_username = 'your_username'
db_password = 'your_password'
db_host = 'your_host'
db_port = 'your_port'
db_name = 'your_database_name'
api_table = 'your_api_table'

# API table column names
component_column = 'component'
request_type_column = 'request_type'
url_column = 'url'
email_column = 'email'

# Function to check API health
def check_api_health(api_row):
    component = api_row[component_column]
    request_type = api_row[request_type_column]
    url = api_row[url_column]
    email = api_row[email_column]

    start_time = time.time()
    try:
        if request_type.upper() == 'GET':
            response = requests.get(url)
        elif request_type.upper() == 'POST':
            response = requests.post(url)
        else:
            return [component, request_type, url, 'Invalid request type', email]

        elapsed_time = time.time() - start_time
        if response.status_code == 200:
            health = 'UP'
        else:
            health = 'DOWN'

        if elapsed_time > 30:
            health += ' (Delayed Response)'
    except requests.exceptions.RequestException as e:
        elapsed_time = time.time() - start_time
        health = f'DOWN (Exception: {str(e)})'

    return [component, request_type, url, health, elapsed_time, email]


# Database connection URL
db_url = f'oracle+cx_oracle://{db_username}:{db_password}@{db_host}:{db_port}/{db_name}'

# Create SQLAlchemy engine
engine = create_engine(db_url)

# Retrieve API information from the table
query = f"SELECT {component_column}, {request_type_column}, {url_column}, {email_column} FROM {api_table}"
api_df = pd.read_sql(query, engine)

# Close the SQLAlchemy engine
engine.dispose()

# Check API health in parallel
with ThreadPoolExecutor(max_workers=10) as executor:
    results = executor.map(check_api_health, api_df.to_dict(orient='records'))

# Generate report using pandas DataFrame
report_columns = [component_column, request_type_column, url_column, 'Health', 'Elapsed Time', email_column]
report_data = list(results)
report_df = pd.DataFrame(report_data, columns=report_columns)

# Display the report
print(report_df)
